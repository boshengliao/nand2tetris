// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   /*
   Xor(a=zx, b=zx, out=zxtmp);
   And16(a=x, b[0]=zxtmp, b[1]=zxtmp, b[2]=zxtmp,
         b[3]=zxtmp, b[4]=zxtmp, b[5]=zxtmp,
         b[6]=zxtmp, b[7]=zxtmp, b[8]=zxtmp,
         b[9]=zxtmp, b[10]=zxtmp, b[11]=zxtmp,
         b[12]=zxtmp, b[13]=zxtmp, b[14]=zxtmp,
         b[15]=zxtmp, out=zxr);

   Not16(in=zxr, out=nxtmp0);
   And16(a=nx, b=nxtmp0, out=nxtmp3)

   And16(a=nx,
         b[0]=nxtmp0,
         b[1]=nxtmp0,
         b[2]=nxtmp0,
         b[3]=nxtmp0,
         b[4]=nxtmp0,
         b[5]=nxtmp0,
         b[6]=nxtmp0,
         b[7]=nxtmp0,
         b[8]=nxtmp0,
         b[9]=nxtmp0,
         b[10]=nxtmp0,
         b[11]=nxtmp0,
         b[12]=nxtmp0,
         b[13]=nxtmp0,
         b[14]=nxtmp0,
         b[15]=nxtmp0,
         out=nxtmp1);

   Xor(a[0]=nx, b=nx, out=nxtmp2);   
   And16(a=zxr, b[0..15]=nxtmp2, out=nxtmp3);
   Or16(a=nxtmp1, b=nxtmp3, out=nxr);
*/
    Mux16(a=x, b=false, sel=zx, out=zxr);

    Mux16(a=false, b=zxr, sel=nx, out=nxr);

    Mux16(a=y, b=false, sel=zy, out=zyr);

    Mux16(a=false, b=zyr, sel=ny, out=nyr);

    Add16(a=nxr, b=nyr, out=f1);
    And16(a=nxr, b=nyr, out=f0);
    Mux16(a=f0, b=f1, sel=f, out=fr);

    Not16(in=fr, out=no1);
    Mux16(a=fr, b=no1, sel=no, out=aa);
/*
    Or8Way(in[0]=tmpout[0],
           in[1]=tmpout[1],
           in[2]=tmpout[2],
           in[3]=tmpout[3],
           in[4]=tmpout[4],
           in[5]=tmpout[5],
           in[6]=tmpout[6],
           in[7]=tmpout[7],
           out=zr1);
    Or8Way(in=aa[8..15], out=zr2);
    Or(a=zr1, b=zr2, out=zr);
*/
    Or16Way(in=aa, out=zr2);
    Not(in=zr2, out=zr);

    //And(a=aa[0], b=aa[0], out=ng);
    IsNegative(in=aa, out=ng);

    And16(a=aa, b=aa, out=out);

}